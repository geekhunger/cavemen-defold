function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	-- Forward @render: message respond
	if message_id == hash("get_world_position") then
		msg.post("/fallower", "set_position", message)
	end
end

function on_input(self, action_id, action)
	-- Show profiler while holding down "KEY_P"
	if action_id == hash("profiler")
	and (action.pressed or action.released)
	then
		msg.post("@system:", "toggle_profile")
	end
	
	-- Catch mouse movement
	if not action.id
	and action
	then
		--pprint(action)
	end
	
	-- Respond to mouse actions
    if action_id == hash("action") and action.released then
    	-- NOTE
		-- action.x and action.y is the position inside the window based on render.get_width() and render.get_height()
		-- action.screen_x and action.screen_y is position inside the window based on render.get_window_width() and render.get_window_height()
		
		-- TODO
		-- calc tile x,y instead of precise screen_x, screen_y
		-- pass that screen point to @render: and get the world coords
		-- set fallower go to position
		--msg.post("@render:", "get_tile_world_position", {x = action.screen_x, y = action.screen_y, width = 8, height = 8})
		msg.post("@render:", "get_world_position", {x = action.screen_x, y = action.screen_y})
	end
	
	-- Zoom camera
	if action_id == hash("zoom_in") then
		msg.post("@render:", "set_view_zoom", {multiplier = 2, resolution = .1, limit = 2})
	elseif action_id == hash("zoom_out") then
		msg.post("@render:", "set_view_zoom", {multiplier = .5, resolution = .1, limit = .4})
	end
end

function on_reload(self)
end
